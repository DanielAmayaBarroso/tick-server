(function(root, Backbone, SpecialK) {
    var modifiers = {
        toTags: function(ctx) {

            var separator = ctx.$el.data('separator') || ',';
            var list = ctx.value.split(separator);
            var tags = [];

            for (var i=0, l=list.length; i<=l; i += 1) {
                if (list.hasOwnProperty(i)) {
                    var tag = list[i].replace(/^\s+|\s+$/gm, '');
                    if (tag && tag !== '') {
                        tags.push(tag);
                    }
                }
            }

            ctx.value = tags;
            ctx.plainValue = tags.join(',');

            return ctx;
        },

        checkbox: function(ctx) {
            ctx.value = false;
            if (ctx.$input.find('input[type="checkbox"]').is(':checked')) {
                ctx.value = true;
            }
            return ctx;
        },

        // from d-m-y h:i:s
        toTimestamp: function(ctx) {
            var DMYRegex = /^([0-9]{1,2})[\.\-\/]([0-9]{1,2})[\.\-\/]([0-9]{4,4})\s([0-9]{1,2}):([0-9]{1,2}):([0-9]{1,2})/gi;
            var regexmatch = DMYRegex.exec(ctx.value);

            if (!regexmatch || regexmatch.length !== 7) {
                return console.log('valdiation error -- not DMY', ctx);
            }

            var datetime = [
                [regexmatch[3], regexmatch[2], regexmatch[1]].join('-'),
                [regexmatch[4], regexmatch[5], regexmatch[6]].join(':')
            ].join(' ');

            var date = new Date(datetime);
            ctx.value = date.getTime();
            return ctx;
        },

        toFloat: function(ctx) {
            ctx.value = parseFloat(ctx.value);
            return ctx;
        },

        toDmy: function(ctx) {
            var date = new Date(ctx.value);
            var Y = date.getFullYear();
            var M = date.getMonth() + 1;
            var D = date.getDate();
            var H = date.getHours();
            var I = date.getMinutes();
            var S = date.getSeconds();

            if (M < 10) M = '0' + M;
            if (D < 10) D = '0' + D;
            if (H < 10) H = '0' + H;
            if (I < 10) I = '0' + I;
            if (S < 10) S = '0' + S;

            return D +'-'+ M +'-'+ Y +' '+ H +':'+ I +':'+ S;
        }
    };

    // --

    SpecialK.modifiers = {};

    SpecialK.modifiers.add = function(name, func) {
        modifiers[name] = func;
    };

    SpecialK.modifiers.normalizeKey = function(ctx) {
        return ctx.key.split('.')[0];
    };

    SpecialK.modifiers.normalizeValue = function(ctx) {
        if (ctx.key.search(/\./) >= 0) {
            var group = ctx.key.split('.');

            var currentVal = ctx.model || {};
            currentVal[group[1]] = ctx.value;

            if (!ctx.plainValue) {
                ctx.plainValue = currentVal[group[1]];
            }
            ctx.value = currentVal;
        }

        if (!ctx.plainValue) {
            ctx.plainValue = ctx.value;
        }

        return ctx.value;
    };

    SpecialK.modifiers.run = function(ctx, modifierName) {
        modifierName = modifierName || 'modifiers';
        if (!ctx.$el.data(modifierName)) return ctx;

        // list of modifiers
        var modifiersList = ctx.$el.data(modifierName)
            .replace(/\s/g, '')
            .split(',');

        for (var i=0, len = modifiersList.length; i<len; i+=1) {
            var modifier = modifiersList[i];
            if (modifiers.hasOwnProperty(modifier)) {
                ctx = modifiers[modifier](ctx);
            }
        }

        return ctx;
    };
})(window, Backbone, SpecialK);

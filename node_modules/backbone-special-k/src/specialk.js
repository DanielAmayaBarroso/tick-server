(function(root, Backbone) {

    var SpecialK = {};

    SpecialK.mainContainer = '#main';

    /**
     * Controla la vista que se muestra en cada momento.
     * Además de gestionar las vistas desde un punto céntrico, se trata de
     * controlar que antes de añadir una nueva vista se elimine
     * la que existía previamente, a modo de recolector de basura, evitando
     * que se llene la memoria de objetos inexistentes.
     */
    SpecialK.ViewManager = {
        currentView: null,

        /**
         * Realiza un unmount y renderiza la nueva vista.
         *
         * Para poder renderizar una vista es necesario que devuelva "this"
         * en el método render.
         *
         * @param  {Object} view Nueva vista a renderizar
         */
        mount: function(view) {
            this.unmount();
            this.currentView = view;

            var renderReturnsView = this.currentView.render();
            if (renderReturnsView) {
                $(SpecialK.mainContainer).empty().append(renderReturnsView.el).fadeIn('slow');
            }
        },

        /**
         * Elimina la vista actual y sus eventos en DOM.
         * @return {bool} True si exitía alguna vista y ha sido eliminada.
         */
        unmount: function() {
            if (!this.currentView) return false;

            $(SpecialK.container).hide();
            this.currentView.unbind();
            this.currentView.remove();
            this.currentView = null;
            return true;
        }
    };

    /**
     * Sometimes an action requires a user confirmation (primarily on
     * remove events). By default SK relays on standar confirm method of
     * javascript, but you can overwrite it with your one function and use
     * some cool library for that (bootbox?).
     *
     * example for custom confirm with bootbox:
     * SpecialK.confirm = function(message, callback) {
     *     bootbox.cofirm(message, callback);
     * }
     *
     * Place this code before instantiate your views, for example in the main
     * documentReady of your app.
     */
    SpecialK.confirm = function(message, callback) {
        if (!callback) return console.log('Callback is required for SpecialK.confirm');
        callback(confirm(message));
    };

    /**
     * Errors created by SpecialK components are passed to this method. You can
     * overwrite it with your own handler in the same way as SpecialK.confirm
     * FIX: Currently not in use
     */
    SpecialK.error = function(message) {
        console.error(message);
    };

    SpecialK.alert = function(message, callback) {
        alert(message);
        if (callback) callback();
    };


    root.SpecialK = SpecialK;

})(window, Backbone);

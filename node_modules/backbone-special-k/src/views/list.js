(function(root, Backbone) {
    if (!Backbone) throw('Backbone is required');

    Backbone.ListView = Backbone.View.extend({
        tagName: 'div',
        className: 'list-view',
        itemsContainer: 'tbody',

        // data
        renderData: {},
        collectionFetchData: {},
        cache: false,
        afterFetch: function() {},

        // dependencies
        Collection: null,
        ItemView: null,

        constructor: function(options) {
            Backbone.View.apply(this, [options]);
        },

        initialize: function(options) {
            options = options || {};
            this.setupCollection(options);
            if (this.init) this.init(options);
        },

        setupCollection: function(options) {
            var that = this;

            if (!this.collection) {
                this.collection = new this.Collection(options._collection);
            }

            if (!options.data) {
                this.collection.fetch({
                    cache: this.cache,
                    data: this.collectionFetchData,
                    success: function() {
                        that.afterFetch.apply(that, arguments);
                        that.trigger('collection-fetch');
                    }
                });
            }

            this.listenTo(this.collection, 'add', this.addItem);
        },

        addItem: function(item) {
            if (!item.urlRoot) {
                item.urlRoot = this.collection.url;
            }
            var viewItem = new this.ItemView({model: item});
            this.$(this.itemsContainer).append(viewItem.render().el);
            if (this.onAddItem) this.onAddItem.call(this, item, viewItem);
        },

        render: function() {
            if (this.beforeRender) this.beforeRender();
            this.$el.html(this.template(this.renderData));
            if (this.onRender) this.onRender();
            return this;
        }
    });

})(window, Backbone);

describe('Mini App', function() {

    before(function(done) {

        // setup bootbox for confirmation alert
        SpecialK.confirm = function(message, callback) {
            bootbox.confirm(message, callback);
        };

        var Model = Backbone.Model.extend({
            idAttribute: '_id'
        });

        var Collection = Backbone.Collection.extend({
            model: Model,
            url: 'http://marocchallenge.es/api/waypoints/publicIndex'
        });

        var ModalView = Backbone.ModalView.extend({
            template: _.template($('#tpl-modal-view').html())
        });

        var ItemView = Backbone.ItemView.extend({
            template: _.template($('#tpl-item-view').html()),
            modalView: ModalView
        });

        var List = Backbone.ListView.extend({
            template: _.template($('#tpl-list-view').html()),
            Collection: Collection,
            ItemView: ItemView,
            init: function() {
                this.message = 'hello!';
            },

            onRender: function() {return this;}
        });

        var FormView = new Backbone.FormView.extend({
            template: _.template($('#tpl-form-view').html()),
        });

        this.onRender = sinon.spy(List.prototype, 'onRender');
        this.list = new List();

        // render list view, items view will be rendered after collection fetch.
        $('#main').empty().append(this.list.render().el);

        // wait for fetch data before end test
        this.list.on('collection:fetch', done);
    });

    describe('List View', function() {
        it('MÃ©todo init es ok', function() {
            expect(this.list.message).to.equal('hello!');
        });

        it('Callback after render (onRender)', function() {
            expect(this.onRender.called).to.equal(true);
        });
    });

    describe('Item View', function() {
        it('Items creados en el dom, con contenido', function() {
            expect($('#list').length).to.equal(1);
            expect($('#list tbody tr').length).to.gt(1);
            expect($('#list tbody tr:first').text()).to.not.equal("");
        });

        it('Eliminar un item', function(done) {
            var that = this;
            var model = this.list.collection.at(0);

            var dataLen = this.list.collection.length;
            var trLen = $('#list tbody tr').length;

            this.list.collection.remove(model);

            // el evento remove genera un fadeOut del item en el dom,
            // hay que darle un tiempo para que acabe
            setTimeout(function() {
                var dataNewLen = that.list.collection.length;
                var trNewLen = $('#list tbody tr').length;
                expect(dataLen === dataNewLen + 1).to.be.true;
                expect(trLen === trNewLen + 1).to.be.true;
                done();
            }, 400);
        });
    });

    describe('Formulario Modal', function() {
        it('Abrir modal, editar campo, comprobar bindings', function(done) {

            var nameValue = $('tbody tr:first td:first').text();

            $('.btn-edit:first').trigger('click');
            setTimeout(function() {
                // cambiar valor de un input
                $('#name').val('Test').change();

                // al editar el campo la tabla debe modificarse automaticamente
                expect($('tbody tr:first td:first').text()).to.equal('Test');

                // cerrar modal despues de ser modificado
                $('.btn-cancel').trigger('click');


                // se abre ventana modal bootbox, pulsar aceptar para cerrar
                $('button[data-bb-handler="confirm"]').trigger('click');

                // al cerrar se debe reestablecer el valor editado en la tabla
                expect($('tbody tr:first td:first').text()).to.equal(nameValue);

                done();
            }, 500);
        });
    });


    describe('Formulario standar', function() {
        it('render y editar campos, comprobar bindings', function() {
            var model = this.list.collection.at(0);
            var FormView = Backbone.FormView.extend({
                template: _.template($('#tpl-form-view').html())
            });

            var form = new FormView({
                model: model
            });

            $('#main').prepend(form.render().el);

            expect($('form #name').val()).to.equal('2.11');
            $('form #name').val('test').change();

            expect(model.get('name')).to.equal('test');
            expect($('tbody tr:first td:first').text()).to.equal('test');
        });
    });
});
